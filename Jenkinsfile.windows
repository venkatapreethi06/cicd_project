pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'weather-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        APP_PORT = '3000'
        TEST_PORT = '3001'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                bat 'docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% .'
                bat 'docker tag %DOCKER_IMAGE%:%DOCKER_TAG% %DOCKER_IMAGE%:latest'
            }
        }

        stage('Test Application') {
            steps {
                echo 'Testing application...'
                bat '''
                @echo off
                echo Starting test container...
                docker run -d --name weather-app-test-%BUILD_NUMBER% -p %TEST_PORT%:%APP_PORT% %DOCKER_IMAGE%:%DOCKER_TAG%

                echo Waiting 30 seconds for app to start...
                timeout /t 30 /nobreak >nul

                echo Testing health check...
                powershell -Command "try { $response = Invoke-WebRequest -Uri http://localhost:%TEST_PORT% -TimeoutSec 10; if ($response.StatusCode -eq 200) { exit 0 } else { exit 1 } } catch { exit 1 }"

                echo Cleaning up test container...
                docker stop weather-app-test-%BUILD_NUMBER% >nul 2>&1
                docker rm weather-app-test-%BUILD_NUMBER% >nul 2>&1

                echo Test passed!
                '''
            }
        }

        stage('Deploy to Production') {
            steps {
                echo 'Deploying to production...'
                bat '''
                @echo off
                echo Stopping existing production container...
                docker stop weather-app-prod >nul 2>&1
                docker rm weather-app-prod >nul 2>&1

                echo Starting new production container...
                docker run -d --name weather-app-prod -p %APP_PORT%:%APP_PORT% --restart unless-stopped %DOCKER_IMAGE%:%DOCKER_TAG%

                echo Production deployment complete!
                '''
            }
        }

        stage('Verify Production') {
            steps {
                echo 'Verifying production deployment...'
                bat '''
                @echo off
                echo Waiting 15 seconds for deployment...
                timeout /t 15 /nobreak >nul

                echo Testing production endpoint...
                powershell -Command "try { $response = Invoke-WebRequest -Uri http://localhost:%APP_PORT% -TimeoutSec 10; if ($response.StatusCode -eq 200) { Write-Host 'Production is live!'; exit 0 } else { exit 1 } } catch { Write-Host 'Production health check failed'; exit 1 }"

                echo Verification complete!
                '''
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            bat '''
            @echo off
            echo Removing build image...
            docker rmi %DOCKER_IMAGE%:%DOCKER_TAG% >nul 2>&1

            echo Pruning containers and images...
            docker container prune -f >nul 2>&1
            docker image prune -f >nul 2>&1

            echo Cleanup complete!
            '''
        }
        success {
            echo 'Pipeline completed successfully!'
            echo "Build #%BUILD_NUMBER% deployed to http://localhost:%APP_PORT%"
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}